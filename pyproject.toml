[project]
name = "pyapi"
version = "0.1.0"
description = "FastAPI backend service"
requires-python = ">=3.10"
dependencies = [
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.34.0",
    "gunicorn>=23.0.0; sys_platform != 'win32'",
    "pydantic>=2.10.4",
    "pydantic-settings>=2.7.0",
    "yarl>=1.18.3",
    "ujson>=5.10.0",
    "sqlalchemy[asyncio]>=2.0.36",
    "asyncpg>=0.30.0",  # PostgreSQL 異步驅動程式
    "aiofiles>=24.1.0",
    "httptools>=0.6.4",
    "pymongo>=4.10.1",  # 可能用於其他功能
    "loguru>=0.7.3",
    "python-jose[cryptography]>=3.3.0",  
    "passlib[bcrypt]>=1.7.4",           
    "python-multipart>=0.0.6",
    "email-validator>=2.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-env>=1.1.3",
    "pytest-asyncio>=0.23.0",  # 新增：支援異步測試
    "httpx>=0.27.0",
    "anyio>=4.0.0",
    "ruff>=0.5.0",
    "black>=24.4.2",
    "mypy>=1.10.1",
    "pre-commit>=3.7.1",
    "coverage[toml]>=7.0.0",  # 新增：更好的覆蓋率支援
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

# FastAPI Template 配置
[tool.fastapi-template]
project_name = "pyapi"
api_type = "rest"
enable_redis = "None"
enable_rmq = "None"
ci_type = "gitlab_ci"
enable_migrations = "None"
enable_taskiq = "None"
enable_kube = "None"
kube_name = "pyapi"
enable_routers = "None"
enable_kafka = "None"
enable_loguru = "True"
traefik_labels = "None"
add_dummy = "None"
orm = "sqlalchemy"
self_hosted_swagger = "True"
prometheus_enabled = "None"
sentry_enabled = "None"
otlp_enabled = "None"
gunicorn = "True"
add_users = "None"
cookie_auth = "None"
jwt_auth = "True"

# 程式碼品質工具配置
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
src_paths = ["pyapi"]
line_length = 88

[tool.mypy]
python_version = "3.10"
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_unused_ignores = false
warn_return_any = false
namespace_packages = true
# 新增：排除測試檔案的嚴格檢查
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]
env = [
    "ENVIRONMENT=test",  # 修正：統一環境變數名稱
    "DEBUG=false",
    "DB_ECHO=false",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# 新增：覆蓋率配置
[tool.coverage.run]
source = ["pyapi"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__main__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.ruff]
target-version = "py310"
line-length = 88
lint.select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
lint.ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "B008",    # Do not perform function calls in argument defaults
    "D211",    # No blank lines allowed before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "D202",    # No blank lines allowed after function docstring
    "ANN102",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for argument
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
]
exclude = [
    "pyapi/db/migrations",
    ".venv/",
    "build/",
    "dist/",
]
lint.mccabe = { max-complexity = 10 }

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
    "D103", # Missing docstring in public function
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
]
"pyapi/__main__.py" = [
    "D100", # Missing docstring in public module
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str", "float", "bytes"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true